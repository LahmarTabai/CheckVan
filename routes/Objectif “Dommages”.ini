Objectif “Dommages”

Tracer précisément tout dommage constaté sur un véhicule, au moment de la prise en charge (check-in) et à la restitution (check-out), avec une localisation visuelle (coord_x, coord_y, coord_z), des preuves photo, un niveau de sévérité, et un cycle de vie (constaté → validé → réparé).

🗃️ Rappel du modèle (table dommages)

Champs actuels :

id

affectation_id (référence à l’affectation en cours, c’est parfait)

chauffeur_id (qui a déclaré/constaté le dommage)

coord_x, coord_y, coord_z

type (ex. rayure, bosse, fissure, éclat pare-brise…)

description

severite (ex. mineur, modéré, majeur, critique)

photo_path (chemin vers la photo)

reparé (booléen)

created_at, updated_at

🔗 Clés étrangères à prévoir (si pas déjà posées) :
affectation_id → affectations.id (ON DELETE CASCADE)
chauffeur_id → users.id (ON DELETE SET NULL / CASCADE selon ta politique)

🧭 Interprétation des coordonnées (coord_x, coord_y, coord_z)

Pour permettre l’annotation 2D/3D :

coord_x, coord_y : coordonnées normalisées entre 0.0 et 1.0 sur l’image/modèle sélectionné.

0,0 = coin haut-gauche ; 1,1 = coin bas-droit.

coord_z : index de la “face” ou profondeur. Propos cohérent :

0 = Avant, 1 = Arrière, 2 = Gauche, 3 = Droite, 4 = Haut, 5 = Bas (optionnel)

Si tu passes plus tard en modèle 3D, coord_z peut devenir la profondeur (0..1) et on ajoutera un champ face (enum).

Pour l’instant, utilisons coord_z comme “face_id” (entier 0..4).

✅ Avantage : tu peux afficher un van 2D par face (images SVG/Canvas) ou basculer plus tard vers un viewer 3D, sans casser les données.

👨‍💼 Rôle de l’Admin dans les Dommages
1) Superviser & Valider

Voit tous les dommages enregistrés par ses chauffeurs (filtre par : véhicule, chauffeur, date, sévérité, face, statut “réparé ou non”).

Ouvre la fiche dommage : photo, point cliqué sur la face du van, type, sévérité, description.

Valide le dommage (confirmé ou à rejeter si mauvais signalement).

(Avec le schéma actuel, la validation peut se modéliser en ajoutant un champ virtuel côté UI ou un futur champ statut_validation. En attendant, on considère “validé” = accepté tacitement par l’admin lors du traitement.)

2) Décider de l’action

Planifier une réparation (créer une demande au garage, marquer “réparé” quand c’est fait).

Évaluer la responsabilité (chauffeur actuel, précédent, indéterminée).

(Option d’évolution : ajouter responsabilite et cout_estime/cout_reel. Pas obligatoire maintenant.)

3) Clôturer / Mettre à jour

Lorsque la réparation est effectuée, coche reparé = true et, si tu veux, enregistre une photo après réparation (tu peux réutiliser photo_path en le remplaçant, ou prévoir plus tard une table dommages_photos si tu veux l’historique complet).

4) Audit & Litiges

Historique par véhicule et par chauffeur (combien de dommages, quand, où sur le van).

Comparatifs : dommages “avant mission” vs “après mission” (selon l’affectation et les tâches).

En cas de litige, l’admin retrouve l’image, l’annotation (coordonnées/face) et la date.

🚚 Rôle du Chauffeur dans les Dommages
Lors de la prise en charge (check-in)

Le chauffeur inspecte le van par faces.

Il touche/click la zone abîmée sur l’image/3D → on enregistre coord_x/y/z.

Il choisit un type (rayure, bosse, fissure, éclat…), une sévérité (mineur/modéré/majeur/critique).

Il ajoute une photo (obligatoire).

Valide l’envoi → le dommage est sauvegardé avec affectation_id courant et reparé = false.

🔒 Règle métier : pour finaliser la prise en charge, le chauffeur doit confirmer :

“Aucun dommage” ou “J’ai listé tous les dommages”.

Pendant / Fin de mission (check-out)

À la restitution, il répète l’inspection.

Si nouveau dommage, il enregistre un nouvel item (même process), rattaché à la même affectation_id.

L’app peut forcer la capture photo s’il coche “dommage présent”.

🧩 Fonctionnalités côté Admin (UI)

Liste & filtres : véhicule (immatriculation), chauffeur, période, sévérité, face, “non réparés” d’abord.

Carte/Tabs par véhicule :

“Dommages actifs” (reparé=false)

“Historique”

Détail dommage : photo zoomable, face du van avec le point (coord_x/y/z), méta (type, sévérité, description).

Actions : “Marquer comme réparé”, “Rejeter” (si faux signalement), “Planifier réparation” (option).

Notifications : reçoit une notif quand un nouveau dommage est signalé.

🧩 Fonctionnalités côté Chauffeur (UI)

Écran “Prise en charge” : galerie/3D des faces + “Ajouter un dommage”.

Annoter : tap long, on plante un marqueur → formulaire (type, sévérité, description, photo).

Liste des dommages de l’affectation : voir ce qu’il a déjà déclaré + ce qui a été validé/réparé par l’admin.

Fin de mission : procédure identique → nouveaux dommages éventuels.

📜 Logique Métier (règles clés)

Intégrité d’affectation

On n’enregistre un dommage que s’il existe une affectation en_cours pour ce chauffeur.

dommages.chauffeur_id doit == chauffeur connecté, et affectation_id == affectation active de ce chauffeur.

Unicité “visuelle” facultative

(Option) Empêcher la duplication sur la même face avec des coords très proches dans la même affectation (tolérance, ex. rayon 2–3%).

Sinon, on laisse l’admin fusionner/fermer.

Photo obligatoire

Un dommage sans photo est refusé (admin peut rejeter, la vue chauffeur doit bloquer l’envoi sans photo).

Sévérité

Guidée au chauffeur (ex. mineur = griffure fine ; majeur = enfoncement + peinture).

Sert à prioriser côté admin (tri par sévérité décroissante).

Réparé = action admin

Seul l’admin coche reparé = true.

(Option) Tu peux exiger une photo après réparation.

Cycle vie dommage vs mission

Tous les dommages déclarés pendant une affectation restent liés à cette affectation.

À la fin, l’admin voit la différence entre “à l’entrée” et “à la sortie”.

Notifications

À chaque nouveau dommage, envoie notif admin (FCM/email selon ton choix).

(Option) notif chauffeur si statut de réparation changé.

🧱 Performances & Index

Index conseillés :

dommages (affectation_id)

dommages (chauffeur_id)

(facultatif) dommages (reparé, severite)

Si tu dois faire des heatmaps ou stats par face, prévoir un index (affectation_id, coord_z).

🚀 Évolutions possibles (sans casser l’existant)

Multi-photos par dommage → table dommages_photos (dommage_id, path).

Validation explicite → champ statut_validation enum('a_verifier','valide','rejete').

Attribution responsabilité → champ responsabilite enum('chauffeur_actuel','precedent','indetermine').

Coûts & atelier → cout_estime, cout_reel, prestataire, date_reparation.

Lien tâche → si tu veux rattacher le dommage à une tâche précise, ajoute tache_id (nullable), même si affectation_id reste la clé principale.

✅ Résumé opérationnel

Au check-in (prise en charge) : le chauffeur annote + photo → dommages enregistrés (affectation en cours).

Pendant / au check-out : idem, pour nouveaux dommages.

Admin : valide, priorise, planifie, marque réparé, suit l’historique par véhicule et par chauffeur.

Données : coordonnées normalisées, face (via coord_z), photo obligatoire, sévérité/type standardisés.